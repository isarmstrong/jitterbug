---
description: This is what Jitterbug is about. It is an Edge-first debugger with a runtime component (sends to Sentry in production) and robust type validation following progressive enhancement principles.
globs:
---

# Jitterbug

Edge-first debugging system for Next.js applications with type safety and runtime awareness. Jitterbug is engineered for optimal performance in Edge Runtimes, offering real-time logging via SSE and integrating with Sentry for production error reporting. This document aligns with the project README and adheres to the @typescript-design.mdc guidelines.

## Key Features

- üîí **Type Safety**
  - Full TypeScript support with generic constraints
  - Runtime-aware type guards
  - Interface contracts for extensibility
  - Progressive enhancement and memory-conscious design following @typescript-design.mdc guidelines

- üåê **Edge Runtime First**
  - Designed for Next.js 13+ Edge Runtime
  - SSE-based real-time logging with rate limiting and backpressure handling
  - Memory-efficient log buffering
  - Automatic runtime detection

- üìä **Smart Processing**
  - Error aggregation and correlation
  - Performance metrics tracking
  - Automatic sensitive data redaction
  - Support for custom log processors

## Project Structure and Rules

### File Patterns to Watch

globs:
  - "*.tsx"
  - "*.ts"
  - "src/**/*"
  - "packages/**/*"
  - "__tests__/**/*"

### Project-specific Rules

- **Edge Transport Configuration**: Ensure Edge transport endpoints follow the pattern '/api/logs/:clientId' for Next.js integration.
- **Client ID Format**: Ensure consistent client ID format (e.g., using crypto.randomUUID()) across the codebase for reliable tracking.
- **Next.js API Routes**: API routes should explicitly set the Edge Runtime with `export const runtime = 'edge'`.
- **Environment Detection**: Use Runtime.EDGE checks instead of window for detecting Edge environments.

### References

- **Core Type Definitions**: @src/types/core.ts
- **Edge Transport Implementation**: @src/transports/edge.ts
- **Next.js Specific API Types**: @packages/jitterbug-next/src/types.ts

### Integration Test Paths

- __tests__/integration/next-app
- __tests__/integration/edge-app

## Logger Configuration Example

```typescript
import { createJitterbugLogger } from "@jitterbug-next";

export const logger = createJitterbugLogger({
  namespace: "my-app",
  environment: "development",
  runtime: "edge",
  endpoint: "/api/logs",
  testMode: false
});
```

## Packages

- `@jitterbug`: Core logging functionality
- `@jitterbug-next`: Next.js integration and Edge Runtime support

## Type Safety

Jitterbug offers comprehensive TypeScript support with runtime type checking, in line with @typescript-design.mdc principles. For example:

```typescript
interface UserEvent {
  userId: string;
  action: "login" | "logout";
  timestamp: Date;
}

// Type-safe event logging
logger.event<UserEvent>("user.action", {
  userId: "123",
  action: "login",
  timestamp: new Date()
});
```

## Edge Runtime Support

Optimized for Next.js Edge Runtime, Jitterbug ensures:
- Automatic runtime detection
- Rate limiting and backpressure handling
- Memory-efficient log buffering
- SSE-based real-time streaming

## Documentation

For detailed documentation and examples, refer to:
- Core API Documentation
- Next.js Integration Guide
- Edge Runtime Configuration